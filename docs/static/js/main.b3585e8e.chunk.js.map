{"version":3,"sources":["appState.ts","Counter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["appStateSlice","createSlice","name","initialState","globalCounterState","reducers","setGlobalCounterState","state","action","payload","actions","CountUp","label","onClick","className","Counter","dispatch","useDispatch","useSelector","appState","React","useState","componentCounterState","setComponentCounterState","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","store","configureStore","reducer","appStateReducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPAcaA,EAAgBC,YAAY,CACvCC,KAAM,WACNC,aAAc,CACZC,mBAAoB,GAEtBC,SAAU,CACRC,sBAAuB,SAACC,EAAOC,GAC7B,OAAO,2BACFD,GADL,IAEEH,mBAAoBI,EAAOC,cAOpBH,EAA0BN,EAAcU,QAAxCJ,sBAEAN,IAAf,Q,OCpBMW,EAAkC,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,MAAOL,EAAqB,EAArBA,MAAOM,EAAc,EAAdA,QACvD,OACE,sBAAKC,UAAU,2BAAf,UACE,qBAAKA,UAAU,sBAAf,SAAsCF,IACtC,qBAAKE,UAAU,cAAf,SAA8BP,IAC9B,wBACEO,UAAU,6DACVD,QAASA,EAFX,4DAgCSE,MAtBf,WACE,IAAMC,EAAWC,cACXV,EAAQW,aAAiC,SAACX,GAAD,OAAWA,EAAMY,YAF/C,EAGyCC,IAAMC,SAAS,GAHxD,mBAGVC,EAHU,KAGaC,EAHb,KAIjB,OACE,sBAAKT,UAAU,4BAAf,UACE,cAAC,EAAD,CACEF,MAAM,mDACNL,MAAOe,EACPT,QAAS,kBAAMU,EAAyBD,EAAwB,MAElE,cAAC,EAAD,CACEV,MAAM,yDACNL,MAAOA,EAAMH,mBACbS,QAAS,kBACPG,EAASV,EAAsBC,EAAMH,mBAAqB,WCxBrDoB,MAff,WACE,OACE,sBAAKV,UAAU,wBAAf,UACE,sBAAKA,UAAU,sBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,OAEF,sBAAKA,UAAU,sBAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,WCEOW,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCARQ,EAAQC,YAAe,CAC3BC,QAAS,CAAEjB,SAAUkB,KAIvBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJO,SAASC,eAAe,SAM1BjB,M","file":"static/js/main.b3585e8e.chunk.js","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\n\n// --------------------------------------------------- models\n\nexport interface AppState {\n  globalCounterState: number;\n}\n\n// --------------------------------------------------- initial state\nexport const initialState: AppState = {\n  globalCounterState: 0,\n};\n\n// --------------------------------------------------- reducers\nexport const appStateSlice = createSlice({\n  name: \"appState\",\n  initialState: {\n    globalCounterState: 0,\n  },\n  reducers: {\n    setGlobalCounterState: (state, action: PayloadAction<number>) => {\n      return {\n        ...state,\n        globalCounterState: action.payload,\n      };\n    },\n  },\n});\n\n// --------------------------------------------------- actions\nexport const { setGlobalCounterState } = appStateSlice.actions;\n\nexport default appStateSlice.reducer;\n","import React from \"react\";\nimport \"./App.css\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { AppState, setGlobalCounterState } from \"./appState\";\nimport { RootState } from \"./index\";\n\ntype CountUpProps = {\n  label: string;\n  state: number;\n  onClick: () => void;\n};\n\nconst CountUp: React.FC<CountUpProps> = ({ label, state, onClick }) => {\n  return (\n    <div className=\"rounded border-2 m-2 p-1\">\n      <div className=\"text-center text-sm\">{label}</div>\n      <div className=\"text-center\">{state}</div>\n      <button\n        className=\"block rounded bg-blue-400 px-2 py-1 m-1 text-white mx-auto\"\n        onClick={onClick}\n      >\n        カウントアップ\n      </button>\n    </div>\n  );\n};\n\nfunction Counter() {\n  const dispatch = useDispatch();\n  const state = useSelector<RootState, AppState>((state) => state.appState);\n  const [componentCounterState, setComponentCounterState] = React.useState(0);\n  return (\n    <div className=\"border-2 inline-block m-2\">\n      <CountUp\n        label=\"ローカルステート\"\n        state={componentCounterState}\n        onClick={() => setComponentCounterState(componentCounterState + 1)}\n      />\n      <CountUp\n        label=\"グローバルステート\"\n        state={state.globalCounterState}\n        onClick={() =>\n          dispatch(setGlobalCounterState(state.globalCounterState + 1))\n        }\n      />\n    </div>\n  );\n}\n\nexport default Counter;\n","import './App.css'\nimport Counter from './Counter'\n\nfunction App() {\n  return (\n    <div className=\"container mx-auto p-2\">\n      <div className=\"flex justify-center\">\n        <Counter />\n        <Counter />\n      </div>\n      <div className=\"flex justify-center\">\n        <Counter />\n        <Counter />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { Provider } from \"react-redux\";\nimport { configureStore } from \"@reduxjs/toolkit\";\nimport appStateReducer from \"./appState\";\n\nconst store = configureStore({\n  reducer: { appState: appStateReducer },\n});\nexport type RootState = ReturnType<typeof store.getState>;\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}